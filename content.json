{"pages":[{"title":"关于","text":"","link":"/about/"}],"posts":[{"title":"My-First-Blog","text":"使用AWS运行代码","link":"/blog-cn/60634/My-First-Blog/"},{"title":"My second blog","text":"使用AWS运行代码","link":"/blog-cn/8343/My-second-blog/"},{"title":"article title","text":"使用AWS运行代码","link":"/blog-cn/46815/article-title/"},{"title":"aws","text":"使用AWS运行代码当本地机器的计算资源有限时，我们可以通过云计算服务获取更强大的计算资源来运行本书中的深度学习代码。本节将介绍如何在AWS（亚马逊的云计算服务）上申请实例并通过Jupyter笔记本运行代码。本节中的例子有如下两个步骤: 申请含一个K80 GPU的“p2.xlarge”实例。 安装CUDA及相应GPU版本的MXNet。 申请其他类型的实例或安装其他版本的MXNet的方法同本节类似。 申请账号并登陆首先，我们需要在 https://aws.amazon.com/ 网站上创建账号。这通常需要一张信用卡。需要注意的是，AWS中国需要公司实体才能注册。如果你是个人用户，请注册AWS全球账号。 登陆AWS账号后，点击图11.8红框中的“EC2”进入EC2面板。 创建并运行EC2实例图11.9展示了EC2面板的界面。在图11.9右上角红框处选择离我们较近的数据中心来减低延迟。我们可以选离国内较近的亚太地区，例如Asia Pacific（Seoul）。注意，有些数据中心可能没有GPU实例。点击图11.9下方红框内“Launch Instance”按钮启动实例。 图11.10的最上面一行显示了配置实例所需的7个步骤。在第一步“1. Chosse AMI”中，选择Ubuntu 16.04作为操作系统。","link":"/blog-cn/1f26b7b2/aws/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/blog-cn/16107/hello-world/"},{"title":"linux系统下安装Nodejs","text":"前言Linux有很多个发行版本，不同的发行版本有不同的包管理工具。为了安装指定的Node.js版本，有时候需要花一些精力找攻略或者安装额外的包管理工具等，有些包管理工具并没有最新的Node.js版本。所以，如果是Linux系统，索性直接使用编译好的二进制文件进行安装是最省心省力的。 安装 下载指定版本的二进制文件 在Node.js官方的发布网站https://nodejs.org/en/下载合适的二进制包，比如我要安装v13.12.0版本，我需要下载二进制包为node-v13.12.0-linux-x64.tar.xz。 解压文件 1tar -xvf node-v13.12.0-linux-x64.tar.xz 拷贝文件到指定目录 1sudo cp -r node-v13.12.0-linux-x64/* /usr/local/ 测试是否安装成功 root@blackmatch:# node -vv13.12.0root@blackmatch:# npm -v6.14.4root@blackmatch:# npx -v6.14.4 总结 二进制包一定要下载合适的（比如x64、x86）等。 安装完成后如果相关命令不生效，请重新打开一个终端即可生效。","link":"/blog-cn/9211474f/linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Nodejs/"},{"title":"secret blog---发布博客","text":"您好, 这里需要密码. 7217cdf2137586a98d94c638508d52a08c986586e9adae78c24b6061df239efa6bd74a8964a6fb1c5fdfd334c074b58043854ecd7c3614829a9b8d3d84571df930bf17369d2e3e7e601be24d664de9c0c76c6db3d34f24c884bbbab57ab54364779e234cbbceeb71ae237828692bece43940cf1c350df9c1aee1082e2186aff9b42472f393244a27262b44b3c6b344b331d4d9b7915e119c020ee0de438ea6abbeef2d8fc96d5bd4283a6f73b696409f11e51b789d78b883654ca541996d3aa787db433363c2742f5196a016431cc2ed6d1ebb55ca8e85cf5fb6c02d38e43a3eb2195dc5449c73d46e11272caaab38b6460447a8bc804a0cc8909764a30f5701dee5e0eadc12a00fc9e23f9631ef6eb02f8f4e631fecc29bf7b110c1de9f8ce20ebd38ffe5c7db157c5ce2ec2e333989b81e6d8713683bf6cb02f731109da98fa1b32296c950926ed48b61681630480e33156b55f33ec38e7f8cb127d3eff772362876b4720e10a0a4b1e20670eb8ac855c3d1343259a83f1c76d59aa7d3423312190e59b0fd11d8d8797209292ae4297111db9c3827284ea00197a9c5fc6307bb0e5df7a5d8b6b4edb570c19606e937520efa9faa2c120b8c8a6a20d85cb950","link":"/blog-cn/d9bfec68/secret-blog/"},{"title":"从0到1搭建个人博客","text":"========================== 本文主要从三方面来介绍： 利用GitPages+Hexo从0到1搭建个人博客的基础流程； 一些博客自定义（更换Next主题、配置自定义域名）及日常使用的方法； 实现多终端无障碍管理博客的技巧； 一、基础博客搭建流程 安装Node和Git要按照下面的顺序一步步安装，每安装完一项，可以在cmd工具中通过查看对应版本的方式检测是否安装成功：name --version，例如：node --version；只要显示出了版本号就代表已经安装成功。 安装node.js。Node.js中文官网（建议安装跟笔者一样的v4.4.4成熟稳定版本）下载到桌面按默认路径安装即可； 安装git。Git官网或者百度软件中心下载到桌面按默认路径安装即可。安装正确的话，在桌面或文件夹空白处鼠标右键菜单会新增“Git GUI Here”和“Git Bash Here”两个选项。 选装cnpm。淘宝cnpm官网。由于npm国内下载速度经常抽风，所以建议安装淘宝的这个镜像；使用方法就是在命令中把npm换成cnpm即可。安装方法：在cmd工具中输入如下命令npm install -g cnpm --registry=https://registry.npm.taobao.org 安装Hexo及其相关插件 全局安装Hexo在桌面空白处单击右键，打开git bash，输入cnpm install hexo-cli -g；安装完成后输入hexo -v，出现版本信息则表示安装成功。 在项目中安装Hexo在桌面打开git bash，输入mkdir hexoBlob（在桌面新建了一个名为hexoBlog的文件夹），然后输入cd hexoBlog（进入到这个文件夹里），再依次执行如下操作： 123$ cnpm install hexo --save #在当前项目中安装hexo；$ hexo init #初始化hexo；$ cnpm install #安装依赖包； 安装hexo的插件 12$ cnpm install hexo-server --save #搭建本地服务器所需插件$ cnpm install hexo-deployer-git --save #使用git方式进行部署博客所需插件 在本地生成博客静态页面并预览以下皆为hexo的指令： 在本地生成静态页面hexo generate，会生成一个存放静态文件的文件夹public，其简写形式为hexo g； 启动本地服务器hexo server,其简写形式为hexo s；这条指令运行完成后可在本地启动服务器并预览博客，默认网址为http://localhost:4000/。如果以上步骤都不出意外的话，你就会看到一个Hexo博客初始化的页面。 截止目前，已经成功安装好了一个初始化的Hexo博客。但是暂时还只能在自己电脑上看到，如何让别人通过域名可以访问到呢？接下来就要请出今天的另外一位主角GitHub Pages了。另外，以上的安装步骤也可参考Hexo官方博客，关于各命令有更详细的解释。 创建GitHub Pages并配置ssh 创建博客仓库。注册并登陆到GitHub官网，假如你注册的用户名是LiLei，那么新建一个名为LeLei.github.io的仓库，注意仓库的用户名一定要是用户名+github.io的形式！ 本地生成ssh密钥。git bash下输入ssh-keygen -t rsa -C ‘你的邮箱地址’ 上传本地的公钥串，使当前电脑与GitHub账户建立联系。在你的电脑C：\\ Users\\你的计算机用户名.ssh目录下打开刚刚生成的id_rsa.pub，复制里面的内容。然后点击你GitHub账户右上角的头像，选择settings，找到SSH and GPG keys，点击进入之后再点击New SSH key，title随便写，把公钥串粘贴到文本框，保存即可。 由于篇幅有限，关于ssh的内容就不详细展开，对于想深究的同学，给你们送上两个传送门：SSH的理解GitHub设置添加SSH 本地博客同步到GitHub上这一步其实就是把本地生成的博客内容（静态页面）放到GitHub新建成的仓库LiLei.github.io中。 编辑博客配置文件: _config.yml在hexo根目录（也就是hexoBlog文件夹）下找到_config.yml文件，把其中的deploy参数（没有的话就按如下格式新建，注意冒号后面一定要有一个空格），修改为： 1234deploy: type: git repo: git@github.com:LiLei/LiLei.github.io.git branch: master 重新部署在博客根目录下打开Git Bash，依次执行如下Hexo命令： 123hexo clean #会清除缓存文件db.json及之前生成的静态文件夹public；hexo g #会重新生成静态文件夹public；hexo deploy #因为之前已经安装了插件并且在博客配置文件中也配置好了，所以这个命令会在博客根目录下生成一个.deploy_git的文件夹，并 把本地生成的静态文件部署到LiLei.github.io这个仓库中的master分支上；简写形式为hexo d； hexo g 和 hexo d可以合并在一起写：hexo g -d 在浏览器中访问博客在浏览器中输入LiLei.github.io（可能你已经发现了，这个就是之前新建仓库的名字，同时也是你博客的域名），没毛病的话，你应该可以再次看到那个熟悉又亲切的博客页面了。 至此，我们已经通过Hexo创建了一个最原始的博客，并且通过把博客静态文件放到GitHub的仓库中，实现了从网上以GitHub的默认域名访问这个博客。接下来要做的就是要锦上添花了：换个好看的主题；自定义博客的域名；操作及优化博客。 二、锦上添花&amp;博客操作锦上添花之更换主题更换主题主要是两步，先下载主题然后放到博客中的themes文件夹（专门用来存放主题）下，再修改主题的配置文件_config.yml中相关参数，启用themes文件夹下新增的主题。这里用Next主题做示例。 下载Next主题。进入 hexoBlog/themes 文件夹中，打开Git Bash面板，输入： 1`git clone https://github.com/iissnan/hexo-theme-next themes/next` 把主题包克隆到themes文件夹中即可。 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开themes下的主题配置文件_config.yml， 找到 theme 字段，并将其值更改为 next（注意冒号后面要留一个 空格）。 验证主题清除并重新生成hexo静态文件，启动本地服务器，然后通过http://localhost:4000/预览博客： 123hexo clean #清除静态文件hexo g #重新生成静态文件hexo s #启动服务器 如果网络没问题，通过域名访问你的博客也可以看到刚换的新主题了。关于更换Next主题的详细介绍，也可访问Next中文官网 锦上添花之配置自定义域名域名注册商可选择godaddy、万网等，推荐使用万网，速度快，后台介绍简洁明了易上手，大家自行注册。下面以万网注册的域名为例说下如何为博客更换自定义域名。 后台域名解析设置进入对应域名的解析后台，添加如下两条解析记录： ![](./GitPages + Hexo,从0到1搭建个人博客 - 简书_files/3877734-87544b0eb0eb559e.jpg) 域名解析设置 在博客目录的source文件夹下（hexoBlog/source）创建一个名为CNAME的文件，内容为你注册域名。 CNAME是不带任何后缀的。 上面操作完毕后，大概过几分钟就可以通过自定义的新域名访问博客了。如果不行，就依次执行hexo clean hexo g hexo d再试下。 博客操作 新建文章hexo new post 背影在Git Bash中执行上面命令会新建一篇名为‘背影’的文章，源文件会自动生成到hexoBlog/source/_post 路径下，后缀为.md，直接打开编辑就可以了。编辑完保存，然后再依次执行hexo clean hexo g hexo d在博客就可以看到你的文章了（有时候网络问题生成会比较慢，需要等几分钟才可以看到）。 新建页面新建标签、分类、关于我等各种页面，并在博客的菜单栏中显示。这里以新建‘标签’页面来做示范。 创建页面.在Git Bah中执行hexo new page 'tags'，会在hexoBlog/source路径下自动生成一个名为tags的文件夹，里面包含一个index.md的文件，在这个文件中添加对应的页面类型type: tags： --- title: Tagcloud date: 2017-01-01 15:24:23 type: &apos;tags&apos; #声明页面类型 --- 把页面路径添加到菜单中.编辑主题配置文件（themes/_config.yml）,找到munu字段，添加tag: /tags（格式为item_name: link），如下： menu: home: / tag: /tags #‘标签’’页面的路径 设置博客中‘标签’这个菜单项的显示图标.同样是在主题配置文件中，找到nenu_icons字段，添加tags tags（格式为item_name: icon_name ），如下： menu_icons: enable: true #显示图标 home: home tag: tags #tag标签的icons是‘tags’ 设置博客中‘标签’这个菜单项的显示文本.上面的item_name并不会直接用于博客界面的显示，只是用来匹配图标和显示在页面上的文字，可以理解为一个桥梁。那么到底在哪里设置呢？首先，在博客配置文件中（hexoBlog下的_config.yml文件）找到language字段，设置为zh-Hans；然后， 在themes/next/languages路径下找到zh-Hans.yml文件，在menu字段下添加tag: 标签云（格式为item_name: show_name），如下： menu: home: 首页 tag: 标签云 #博客页面就会显示‘标签云’ 菜单这块的设置会比较绕，其实主要也就几步，先创建文件夹，再添加路径，然后设置需要显示的图标和文本，只不过文本的设置要到zh-Hans.yml这个文件中操作。更详细的步骤请移步官网关于菜单设置的介绍。 三、多终端同步管理技巧如果你使用过云盘或者有Git操作的基础，下面的内容会非常好理解。思路：需要发布到GitHub仓库的静态内容（也就是执行hexo g -d之后生成的public和.deploy_git文件夹）放在master上，而博客所有其他源文件（除了public和.deploy_git）存放到另外一个新建的hexo分支（这个分支的名字可以随意取），并且在GitHub上将其设为默认分支。以后所有的操作都会在hexo这个分支上进行，操作完之后依次执行git add . git commit -m 'commets' git push把所有源文件推到远程仓库的hexo分支上（这里远程仓库其实扮演了一个云盘的角色）；即使换了电脑，你可以直接clone远程仓库的hexo分支到本地或者执行git pull下拉更新到本地覆盖现有源文件，就在本地还原了最新的博客内容了。操作流程假设你最早是在家里的A电脑上搭建了博客，那么A电脑的准备工作：把源文件push到GitHub。 初始化仓库博客根目录下依次执行：git initgit remote add origin &lt;server&gt; 新建并切换到hexo分支git checkout -b hexo 找到.gitignore文件（没有的话就在根目录下新建一个）,在最后增加两行内容：/.deploy_git 和 /public 目的是让git不跟踪这两个文件的更新，也就是push到hexo分支的内容里不会有这两个文件。 把本地新建的分支push到远程分支：git add .git commit -m 'commets'git push -u origin hexo:hexo然后再去GitHub上把新建的hexo分支设置为默认分支。 画面一转，我们到了公司。此时公司B电脑上空空如也，那么执行如下操作： 在桌面（或任意地址）执行git clone &lt;server&gt; -b &lt;branch&gt;这里的是你远程仓库的clone地址，就是之前新创建的hexo分支，这句话的作用是把远程仓库中的分支克隆到本地当前目录。 有了源文件就可以任性修改博客了。修改完之后先生成静态文件发布到博客中：hexo cleanhexo g -d再把最终保存的源文件push到GitHub，保证多终端可以同步：git add .git commit -m 'comment'git push 最后画面再切换会家中的A电脑，因为此时远程仓库中的博客源文件已经做了更新，而我们A电脑上也有之前的源文件，那么只需要下来更新覆盖到本地就可以啦，进入到博客根目录，执行：git pull 终于可以暂告一段落了，简直完美：） 四、总结 每次写完博客发布都需要用到的命令hexo cleanhexo g -d 发布之前，在本地预览博客用到的命令：hexo s 同步博客需要用到的命令：git add .git commit -m 'comment'git pushgit clone &lt;server&gt; -b &lt;branch&gt;git pull 五、参考资料 Hexo官网 Next主题官网 Hexo在GitHub上构建免费的web应用","link":"/blog-cn/4f9c12a0/%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"my 3 blog","text":"您好, 这里需要密码. f242408b022968758a8db4745980f44cffd929f6a29a4557261820c8a404d7c39f9a20430a40853d9a7994b4d9a820032f3bb80cab8ab25c15d69f057f15293709c0a6e758c1de673314753524fc3c5c320d6397bc5c31ae90159f084b1cabea8739db4259a1a75703b8613dd302b828ccdbbbfa8a75a6ebc1df66afbe4697f15fc9c1bf2d227de3c6907fbbdabae4c7","link":"/blog-cn/95f91522/my-3-blog/"},{"title":"my 4 blog","text":"使用AWS运行代码","link":"/blog-cn/88fc259a/my-4-blog/"}],"tags":[{"name":"Encrypted","slug":"Encrypted","link":"/tags/Encrypted/"}],"categories":[]}